```typescript
const fs = require('fs');

const markdown = `
# COPE: Manage Python Environments from Javascript

COPE (COPE Operates Python Environments) is a cross-platform node.js/typescript package designed to manage python environments (conda, python venv, etc) on a local user's machine. It can be used within applications to manage python environments, loaded as an electron-app compatible IPC service, CLI utility, or a background HTTP RESTful API.

## Requirements

1. **Code Evaluation**: Examine the existing code and evaluate its accuracy. Modify it as needed to meet the defined requirements and other data. The existing code base should be the starting point for all modifications and enhancements.

2. **Package Formation**: The project must be in a well-formed yarn package.

3. **Technology Stack**: Use Node.js, TypeScript, and libraries such as ShellJS (https://www.npmjs.com/package/shelljs). Before installing any dependencies, check if they are already installed to avoid unnecessary installations.

4. **Input Sanitization**: Shell commands passed in from a caller/user’s input (or arguments) should be sanitized. Consider using this library: https://www.npmjs.com/package/sanitize.

5. **Testing**: Implement end-to-end unit and other tests. Tests should use the "Jest" framework: https://jestjs.io/.

6. **Examples**: Include usage examples and write them to files in an “examples” directory.

7. **Documentation**: The library should be well documented using markdown, in the docs/ directory.

8. **Functionality**: The package must support the full range of commands for conda/python virtualenv management and interaction - full Create, Update, Delete support as well as other built-in commands.

9. **Compatibility**: The package must work on Windows, Linux, and macOS.

10. **Resource Access**: The package should request access to local resources if the OS supports it, for example, https://developer.apple.com/documentation/uikit/protecting_the_user_s_privacy/requesting_access_to_protected_resources.

11. **Environment Variables**: Include a .env.example file for any API keys, environment variables, etc.

12. **Docker Support**: Include Docker container support (e.g., a "docker" build target) so users could run/test in a local Docker container vs mutating the local environments on their laptop.

13. **GitHub Build Targets Support**: Set up GitHub Actions for continuous integration, following best practices for CI/CD. Configure build targets in the GitHub Actions workflow, ensuring the application builds correctly on all target platforms. Test the GitHub Actions workflow, ensuring it works reliably.

14. **Process Management**: Implement function to detect hung processes in Node.js. Implement function to kill hung processes in Node.js. Inform the caller when a process is killed due to a timeout.

15. **Conda and Python Virtualenv Commands**: Implement commands for activating and deactivating conda/python virtualenv. Implement commands for listing all conda/python virtualenv. Implement commands for checking the details of a specific conda/python virtualenv.

16. **Best Practices for Node.js and TypeScript**: Keep TypeScript up-to-date, as TypeScript developers are always releasing new versions. Enable strict mode in TypeScript to catch common programming errors at compile time. Follow Node.js best practices as listed in the [Node.js best practices list](https://dev.to/alexandrefreire/node-js-best-practices-list-july-2021-3p4k).

17. **Best Practices for Conda and Python Virtualenv**: Always specify a Python version when creating a virtual environment with conda. Use conda to create a new environment and only install packages using conda install. Avoid running pip and conda install in the same virtual environment.

18. **Security, Reliability, and Community Standards**: Follow best practices for security, such as input sanitization, secure handling of environment variables, and secure use of dependencies. Ensure the reliability of the package through comprehensive testing and compatibility checks. Adhere to community standards for Node.js and TypeScript projects, such as code style, documentation, and package structure.

## Helpful Links

- For electron support, see: https://www.electronjs.org/docs/latest/tutorial/ipc.
- JupyterDesktop has support for environment management you can learn from: https://github.com/jupyterlab/jupyterlab-desktop.

## Files

- The existing COPE code base is located at: /Users/jesse/Code/cope/.
- The main code is in /Users/jesse/Code/cope/src.
- Documentation should be in a docs directory (e.g., /Users/jesse/Code/cope/docs).

## Important Details

- If you are stuck, remember to seek help and use available resources.

## Evaluating Your Performance

1. **Self-Review**: Continuously review and analyze your actions to ensure optimal performance.
2. **Decision Making**: Use instructions to decide the flow of execution and determine the next steps for task completion.
3. **Self-Criticism**: Constructively self-criticize your big-picture behavior constantly.
4. **Reflection**: Reflect on past decisions and strategies to refine your approach.
5. **Efficiency**: Every tool has a cost, so be smart and efficient. Aim to complete tasks in the least number of steps.
6. **Task Breakdown**: Break tasks up into sub-tasks as needed for better management and understanding.
`;

fs.writeFileSync('/Users/jesse/Code/cope/docs.md', markdown);
```
